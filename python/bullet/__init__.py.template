import os.path
import types
import cppyy

_solib_name = "cppyy_bullet.so"

# First, create the 'bt' object, so that when we import other modules (such as
# 'bullet.callbacks', they can do 'from bullet import bt' too. (we'll populate
# BulletLibrary later)
class BulletLibrary (object):
    pass

bt = BulletLibrary()

__all__ = ['bt']

# Look for the shared library first in the same directory as __init__.py
# If it's not there, fall back to using the normal library search path instead.
_solib = os.path.join(os.path.dirname(__file__), _solib_name)
if not os.path.exists(_solib):
    _solib = _solib_name
cppyy.load_reflection_info(_solib)

from . import callbacks
from . import mm

def _define_symbol(symbol, value):
    # All these must be set on the BulletLibrary class, not the 'bt' object,
    # because properties (getters/setters) only work when defined on the class,
    # not the object.
    # However, if value is a function, then if we put it on the class, it will
    # end up being a bound method, which will change the arguments it gets
    # called with, and we don't want that.  In that case, we need to wrap it as
    # a staticmethod to avoid that.
    if isinstance(value, types.FunctionType):
        class_value = staticmethod(value)
    else:
        class_value = value
    setattr(BulletLibrary, symbol, class_value)

    # Also store them under "trimmed" names so that the user can refer to
    # things as (for example) "bt.DbvtBroadphase()" instead of
    # "bt.btDbvtBroadphase()"..
    if symbol.startswith('bt'):
        setattr(BulletLibrary, symbol[2:], class_value)
    elif symbol.startswith('BT_'):
        setattr(BulletLibrary, symbol[3:], class_value)

    # For classes and such, we will also define them in the 'bullet' module
    # itself (this is mainly so that the repr() returned for cppyy objects
    # (which reports them all as "bullet.<classname>") actually refers to a
    # valid thing).
    # We do NOT, however, do this for anything that involves magic (i.e.
    # getter/setters), because that sort of magic doesn't work for module
    # namespaces.
    if not hasattr(value, '__get__'):
        globals()[symbol] = value
        __all__.append(symbol)

_cppyy_syms = %SYMBOLS%

# Misc tidbits that genreflex/cppyy doesn't handle, or we want to override
# specially:
_manual_syms = [
    ('btScalar', float),
    ('gContactAddedCallback', callbacks.ContactAddedCallback()),
    ('gContactProcessedCallback', callbacks.ContactProcessedCallback()),
    ('gContactDestroyedCallback', callbacks.ContactDestroyedCallback()),
    ('memory_manager', mm.MemoryManager),
]

for symbol in _cppyy_syms:
    # We must use getattr first to prod cppyy into actually loading the
    # symbol into its dictionary...
    value = getattr(cppyy.gbl, symbol)

    # But for global variables, we actually want to look things up via raw
    # __dict__ access to make sure we copy the underlying property
    # (getter/setter) object instead of just the current value. (But just to
    # complicate things, some other types of symbols (i.e. typedefs) are never
    # actually present in the cppyy.gbl dictionary and can only be fetched via
    # getattr.  So try the dict lookup, and fall back to just using the value
    # we got from getattr above if that's not found..)
    value = cppyy.gbl.__dict__.get(symbol, value)

    _define_symbol(symbol, value)

for symbol, value in _manual_syms:
    _define_symbol(symbol, value)

